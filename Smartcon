pragma solidity ^0.8.2;
//NOTES: connect metamask to binance smart chain faucet
//academy.binance.com/en/articles/connecting-metamask-to-binance-smart-chain
// vanity-ETH

contract Token {
    mapping (address => uint) public balances;
    mapping (address => mapping(address => uint)) public allowance;
 //   0x5899595090 //owner of Token outer
 //   -> 0x589959509 => 10000 //spender
 //   -> 0x589959509 => 10000 //spender
 //   -> 0x589959509 => 10000 //spender
    
    
    
    uint public totalSupply = 10000 * 10 ** 18;
    string public name = "My Token";
    string public symbol = "TKN";
    unint public decimals =18;
        
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        balances[msg.sender] = totalSupply;
    }
    
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }
    
    function transfer(address to, uint value) public returns(bool) {
        require(balanceOf(msg.sender) >= value, 'balance to low');
        balances[to] += value;
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
        
    }
    function transferFrom(address from, address to, uint value) public returns(bool){
        require(balanceOf(from) >= value, 'balance to low')
        require(allowance(from)[msg.sender] >= value, 'allowance too low')
        balances[to] += value;
        balances[from] -= value;
        emit Transfer(from, yo, vaule);
        return true;
    
    }
    
    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emt Approval(msg.sender, spender, value);
        return true;
    }
    
}
